name: SonarQube Scan

on:
  workflow_call:
    secrets:
      GIT_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true
    

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Build and analyze
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"palash150403_composite-actions" /o:"palash150403" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Install jq
        run: sudo apt-get install -y jq

 
      - name: Check SonarQube Quality Gate Status
        shell: bash
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          reportTaskFile=".sonarqube/out/.sonar/report-task.txt"
          if [ ! -f "$reportTaskFile" ]; then
            echo "SonarQube report task file not found."
            exit 1
          fi
          
          # Debugging: Print report-task.txt content
          echo "Content of $reportTaskFile:"
          cat "$reportTaskFile"
          
          ceTaskUrl=$(grep -oP '(?<=ceTaskId=).*' "$reportTaskFile" | xargs -I{} echo "https://sonarcloud.io/api/ce/task?id={}")
          echo "Computed ceTaskUrl: $ceTaskUrl"
          
          echo "Polling SonarQube for Quality Gate status..."
          timeout=600  # Increased wait time to 10 minutes
          interval=10  # Polling interval in seconds
          elapsed=0
          status="IN_PROGRESS"
          while [ "$status" == "IN_PROGRESS" ] && [ "$elapsed" -lt "$timeout" ]; do
            response=$(curl -s -u "$SONAR_TOKEN:" "$ceTaskUrl")
            
            # Debugging: Print API response
            echo "API Response: $response"
            
            status=$(echo "$response" | jq -r '.status')
            gateStatus=$(echo "$response" | jq -r '.analysisStatus' || echo "UNKNOWN")
            if [ "$status" == "SUCCESS" ]; then
              echo "Quality Gate Status: $gateStatus"
              if [ "$gateStatus" == "OK" ]; then
                echo "Quality Gate passed!"
                exit 0
              else
                echo "Quality Gate failed!"
                exit 1
              fi
            fi
            sleep "$interval"
            elapsed=$((elapsed + interval))
          done

          echo "Quality Gate status check timed out after $timeout seconds."
          exit 1
