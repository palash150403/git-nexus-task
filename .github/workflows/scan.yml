name: SonarQube Scan

on:
  workflow_call:
    secrets:
      GIT_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Build and analyze
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"palash150403_composite-actions" /o:"palash150403" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: SonarQube Quality Gate Check
        description: >
          Check if a project / analysis passed the Quality Gate check
        branding:
          icon: check
          color: green
        runs:
          using: "composite"
          steps:
            - id: quality-gate-check
              run: $GITHUB_ACTION_PATH/script/check-quality-gate.sh "${{ inputs.scanMetadataReportFile  }}" "${{ inputs.pollingTimeoutSec }}"
              shell: bash
        inputs:
          scanMetadataReportFile:
            description: Location of the scanner metadata report file
            required: false
            default: .sonarqube/out/.sonar/report-task.txt
          pollingTimeoutSec:
            description: "The maximum time (in seconds) to poll for SonarQube's Quality Gate status. Default: 300."
            required: false
            default: "300"
        outputs:
          quality-gate-status:
            description: >
              The resulting Quality Gate Status value of PASSED, WARN or FAILED
            value: ${{ steps.quality-gate-check.outputs.quality-gate-status }}
      

      

