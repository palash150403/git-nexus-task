name: CI/CD Workflow

on:
  workflow_call:

env:
  PROJECT_PATH: '**/*.csproj'
  PACKAGE_OUTPUT_DIR: './bin/Release'
  PACKAGE_ID: ""
  PACKAGE_VERSION: ""
  ARTIFACT_PATH: ""

jobs:
  build:
    runs-on: ubuntu-latest
    container: 
      image: mcr.microsoft.com/dotnet/sdk:8.0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Restore packages
      run: dotnet restore 

    - name: Build project
      run: dotnet build --no-restore --configuration Release

    - name: Set package name and version
      id: set_name
      shell: bash
      run: |
        echo "Checking GITHUB_REF: $GITHUB_REF"
        git config --global --add safe.directory /__w/composite-action/composite-action
        FOLDER_NAME="helloworld"

        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          git fetch --unshallow || true
          MAIN_COMMIT=$(git rev-parse origin/main)
          TAG_COMMIT=$(git rev-parse "${GITHUB_REF}")

          if [[ "$TAG_COMMIT" == "$MAIN_COMMIT" ]]; then
            export PACKAGE_ID="${FOLDER_NAME}-${TAG_NAME}"
            export PACKAGE_VERSION="${TAG_NAME}"
          else
            echo "Error: Tags must be created on the main."
            exit 1
          fi
        elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
          export PACKAGE_ID="${FOLDER_NAME}"
          export PACKAGE_VERSION="1.0.0-${GITHUB_RUN_ID}"
        elif [[ "${GITHUB_REF}" == "refs/heads/release" ]]; then
          COMMIT_ID=$(echo "${GITHUB_SHA}" | cut -c1-6)
          export PACKAGE_ID="${FOLDER_NAME}-1.0.0-release-${COMMIT_ID}"
          export PACKAGE_VERSION="1.0.0-release-${COMMIT_ID}"
        else
          echo "Error: Unsupported branch/tag for setting package name/version."
          exit 1
        fi

        echo "PACKAGE_ID=${PACKAGE_ID}" >> $GITHUB_ENV
        echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
        echo "PACKAGE_ID: $PACKAGE_ID"
        echo "PACKAGE_VERSION: $PACKAGE_VERSION"

        

    - name: Pack packages
      run: |
        dotnet pack --no-restore --no-build --configuration Release --output ${{ env.PACKAGE_OUTPUT_DIR }} \
          /p:CustomPackageId=$PACKAGE_ID \
          /p:PackageVersion=$PACKAGE_VERSION
        ARTIFACT_PATH="${{ env.PACKAGE_OUTPUT_DIR }}/${PACKAGE_ID}.${PACKAGE_VERSION}.nupkg"
        echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> $GITHUB_ENV
        echo "Packaging completed. Artifact path: $ARTIFACT_PATH"


    - name: Upload Package as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: nuget-package
        path: ${{ env.ARTIFACT_PATH }}
    
    - name: list in bin release
      run: ls -al ./bin/Release

    - name: list in artifact
      run: ls -al ${{ env.ARTIFACT_PATH }}